// <auto-generated />
using System;
using CruiseManagement.API.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CruiseManagement.API.Migrations
{
    [DbContext(typeof(CruiseManagementContext))]
    partial class CruiseManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CruiseManagement.API.Entities.CabinType", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ShipId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("CabinTypes");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Cruise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CabinTypeId");

                    b.Property<int?>("CruiseLineId");

                    b.Property<DateTimeOffset>("DepartureDate");

                    b.Property<bool>("FlightIncluded");

                    b.Property<int?>("ShipId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CabinTypeId");

                    b.HasIndex("CruiseLineId");

                    b.HasIndex("ShipId");

                    b.ToTable("Cruises");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.CruiseLine", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CruiseLines");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Port", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CruiseId");

                    b.Property<int>("Days");

                    b.Property<int>("PortId");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.HasIndex("PortId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Ship", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CruiseLineId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CruiseLineId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.CabinType", b =>
                {
                    b.HasOne("CruiseManagement.API.Entities.Ship", "Ship")
                        .WithMany("CabinTypes")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Cruise", b =>
                {
                    b.HasOne("CruiseManagement.API.Entities.CabinType", "CabinType")
                        .WithMany()
                        .HasForeignKey("CabinTypeId");

                    b.HasOne("CruiseManagement.API.Entities.CruiseLine", "CruiseLine")
                        .WithMany("Cruises")
                        .HasForeignKey("CruiseLineId");

                    b.HasOne("CruiseManagement.API.Entities.Ship", "Ship")
                        .WithMany()
                        .HasForeignKey("ShipId");
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Route", b =>
                {
                    b.HasOne("CruiseManagement.API.Entities.Cruise", "Cruise")
                        .WithMany("Routes")
                        .HasForeignKey("CruiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CruiseManagement.API.Entities.Port", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CruiseManagement.API.Entities.Ship", b =>
                {
                    b.HasOne("CruiseManagement.API.Entities.CruiseLine", "CruiseLine")
                        .WithMany("Ships")
                        .HasForeignKey("CruiseLineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
